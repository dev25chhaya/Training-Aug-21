// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToysCompany.Models;

namespace ToysCompany.Migrations
{
    [DbContext(typeof(ToysCompanyContext))]
    partial class ToysCompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("ToysCompany.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NetAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<int>("TotalDiscount")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Plant", b =>
                {
                    b.Property<Guid>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlantId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ToysId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToysId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Toys", b =>
                {
                    b.Property<Guid>("ToysID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ToysCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ToysID");

                    b.HasIndex("ToysCategoryId");

                    b.ToTable("Toys");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.ToysCategory", b =>
                {
                    b.Property<Guid>("ToysCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlantsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ToysCategoryId");

                    b.HasIndex("PlantsId");

                    b.ToTable("ToysCategories");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Address", b =>
                {
                    b.HasOne("ToysCompany.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Order", b =>
                {
                    b.HasOne("ToysManufacturingCompany.Models.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Purchase", b =>
                {
                    b.HasOne("ToysManufacturingCompany.Models.Order", "Order")
                        .WithMany("Purchase")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToysManufacturingCompany.Models.Toys", "Toys")
                        .WithMany("Purchase")
                        .HasForeignKey("ToysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Toys");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Toys", b =>
                {
                    b.HasOne("ToysManufacturingCompany.Models.ToysCategory", "ToysCategory")
                        .WithMany("Toys")
                        .HasForeignKey("ToysCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToysCategory");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.ToysCategory", b =>
                {
                    b.HasOne("ToysManufacturingCompany.Models.Plant", "Plants")
                        .WithMany("ToysCategories")
                        .HasForeignKey("PlantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plants");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Order", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Plant", b =>
                {
                    b.Navigation("ToysCategories");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.Toys", b =>
                {
                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("ToysManufacturingCompany.Models.ToysCategory", b =>
                {
                    b.Navigation("Toys");
                });
#pragma warning restore 612, 618
        }
    }
}
