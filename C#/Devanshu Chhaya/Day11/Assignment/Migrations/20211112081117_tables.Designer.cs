// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assignment.Models;

namespace assignment.Migrations
{
    [DbContext(typeof(hospitalContext))]
    [Migration("20211112081117_tables")]
    partial class tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("assignment.Models.Department", b =>
                {
                    b.Property<int>("DeptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("deptId")
                        .UseIdentityColumn();

                    b.Property<string>("DeptName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("deptName");

                    b.HasKey("DeptId")
                        .HasName("departmentId_PK");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("assignment.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("assignment.Models.Drug", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("drugs");
                });

            modelBuilder.Entity("assignment.Models.DrugSchedual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DrugId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrugId");

                    b.HasIndex("PatientId");

                    b.ToTable("drugSchedual");
                });

            modelBuilder.Entity("assignment.Models.HealthcareAss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("healthcareAss");
                });

            modelBuilder.Entity("assignment.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AssistanceId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AssistanceId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("assignment.Models.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("treatment");
                });

            modelBuilder.Entity("assignment.Models.Doctor", b =>
                {
                    b.HasOne("assignment.Models.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("doctor_departmentid_FK");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("assignment.Models.DrugSchedual", b =>
                {
                    b.HasOne("assignment.Models.Drug", "Drug")
                        .WithMany("DrugScheduals")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("drugSchedual_drugid_FK");

                    b.HasOne("assignment.Models.Patient", "Patient")
                        .WithMany("DrugScheduals")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("drugSchedual_patientid_FK");

                    b.Navigation("Drug");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("assignment.Models.HealthcareAss", b =>
                {
                    b.HasOne("assignment.Models.Department", "Department")
                        .WithMany("HealthcareAsses")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("healthcareAss_departmentid_FK");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("assignment.Models.Patient", b =>
                {
                    b.HasOne("assignment.Models.HealthcareAss", "Assistance")
                        .WithMany("Patients")
                        .HasForeignKey("AssistanceId")
                        .HasConstraintName("patient_assistanceid_FK");

                    b.HasOne("assignment.Models.Department", "Department")
                        .WithMany("Patients")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("patient_departmentid_FK");

                    b.Navigation("Assistance");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("assignment.Models.Treatment", b =>
                {
                    b.HasOne("assignment.Models.Doctor", "Doctor")
                        .WithMany("Treatments")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("treatment_doctorid_FK");

                    b.HasOne("assignment.Models.Patient", "Patient")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("treatment_patientid_FK");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("assignment.Models.Department", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("HealthcareAsses");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("assignment.Models.Doctor", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("assignment.Models.Drug", b =>
                {
                    b.Navigation("DrugScheduals");
                });

            modelBuilder.Entity("assignment.Models.HealthcareAss", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("assignment.Models.Patient", b =>
                {
                    b.Navigation("DrugScheduals");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
